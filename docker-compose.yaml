version: "3.5"
services:
    mosquitto:
        image: eclipse-mosquitto
        hostname: mosquitto
        ports:
            - "1883:1883"
            - "9001:9001"
        volumes:
            - mqtt-conf:/mosquitto/mosquitto.conf
        deploy:
            restart_policy:
                condition: on-failure

    weatherSubscriber:
        image: eclipse-mosquitto
        depends_on: 
            - mosquitto
            - swarmpit-app
            - agent
        command: "mosquitto_sub -h mosquitto -t weatherStation"
        deploy:
            restart_policy: 
                condition: on-failure

    brewerySubscriber:
        image: eclipse-mosquitto
        depends_on: 
            - mosquitto
            - swarmpit-app
            - agent
        command: "mosquitto_sub -h mosquitto -t brewery"
        deploy:
            restart_policy: 
                condition: on-failure

    sunriseSunset: 
        image: ubuntu
        depends_on:
            - mosquitto
            - weatherSubscriber
        command: >
            bash -c " apt-get update
            && apt-get install -y wget software-properties-common
            && apt-add-repository ppa:mosquitto-dev/mosquitto-ppa
            && apt-get update
            && apt-get install -y mosquitto nodejs mosquitto-clients
            && cd ~
            && wget https://raw.githubusercontent.com/mstreet97/dncs-swarm-management/master/sunriseSunset.js
            && while true; do node sunriseSunse.js Trento IT > sunriseFile; mosquitto_pub -h mosquitto -t weatherStation -f sunriseFile; sleep 300; done"
        deploy:
            restart_policy:
                condition: on-failure
                delay: 15s
                window: 15s
            
    forecast:
        image: ubuntu
        depends_on: 
            - mosquitto
            - weatherSubscriber
        command: >
            bash -c " apt-get update
            && apt-get install -y wget software-properties-common
            && apt-add-repository ppa:mosquitto-dev/mosquitto-ppa
            && apt-get update
            && apt-get install -y mosquitto mosquitto-clients curl
            && while true; do curl wttr.in/Trento > weatherFile; mosquitto_pub -h mosquitto -t weatherStation -f weatherFile; sleep 300; done"
        deploy:
            restart_policy:
                condition: on-failure
                delay: 10s
                window: 15s
    
    temperature: 
        image: ubuntu
        depends_on: 
            - mosquitto
            - brewerySubscriber
        command: >
            bash -c " apt-get update
            && apt-get install -y wget software-properties-common
            && apt-add-repository ppa:mosquitto-dev/mosquitto-ppa
            && apt-get update
            && apt-get install -y mosquitto mosquitto-clients python
            && while true; do python -c \"import random; print 'Cask Temperature: ' + str(random.randint(58,65)) + 'Â°F' \" > tempFile; mosquitto_pub -h mosquitto -t brewery -f tempFile; rm tempFile; sleep 10; done"
        deploy:
            restart_policy:
                condition: on-failure
                delay: 10s

    volume: 
        image: ubuntu
        depends_on: 
            - mosquitto
            - brewerySubscriber
        command: >
            bash -c " apt-get update
            && apt-get install -y wget software-properties-common
            && apt-add-repository ppa:mosquitto-dev/mosquitto-ppa
            && apt-get update
            && apt-get install -y mosquitto mosquitto-clients python
            && while true; do python -c \"import random; print 'Cask Volume: ' + str(random.uniform(5,5.1)) + 'gal'\" > volumeFile; mosquitto_pub -h mosquitto -t brewery -f volumeFile; sleep 10; done"
        deploy:
            restart_policy:
                condition: on-failure
                delay: 10s
    
    pressure: 
        image: ubuntu
        depends_on: 
            - mosquitto
            - brewerySubscriber
        command: >
            bash -c " apt-get update
            && apt-get install -y wget software-properties-common
            && apt-add-repository ppa:mosquitto-dev/mosquitto-ppa
            && apt-get update
            && apt-get install -y mosquitto mosquitto-clients python
            && while true; do python -c \"import random; print 'Cask Pressure: ' + str(random.uniform(14.7,15)) + 'PSI'\" > pressureFile; mosquitto_pub -h mosquitto -t brewery -f pressureFile; sleep 10; done"
        deploy:
            restart_policy:
                condition: on-failure
                delay: 10s


# Log visualization and related services
# Note, it is extremely resource hungry and will need another node

    # elasticsearch:
    #     image: docker.elastic.co/elasticsearch/elasticsearch:5.3.2
    #     environment:
    #         ES_JAVA_OPTS: '-Xms256m -Xmx256m'
    #         xpack.security.enabled: 'false'
    #         xpack.monitoring.enabled: 'false'
    #         xpack.graph.enabled: 'false'
    #         xpack.watcher.enabled: 'false'
    #     volumes:
    #         - esdata:/usr/share/elasticsearch/data
    #     deploy:
    #         replicas: 1

    # logstash:
    #     image: docker.elastic.co/logstash/logstash:5.3.2
    #     volumes:
    #         - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    #     depends_on:
    #         - elasticsearch
    #     deploy:
    #         replicas: 1

    # logspout:
    #     image: bekt/logspout-logstash
    #     environment:
    #         ROUTE_URIS: 'logstash://logstash:5000'
    #     volumes:
    #         - /var/run/docker.sock:/var/run/docker.sock
    #     depends_on:
    #         - logstash
    #     deploy:
    #         mode: global
    #         restart_policy:
    #             condition: on-failure
    #             delay: 30s

    # kibana:
    #     image: docker.elastic.co/kibana/kibana:5.3.2
    #     ports:
    #         - 5601:5601
    #     depends_on:
    #         - elasticsearch
    #     environment:
    #         ELASTICSEARCH_URL: 'http://elasticsearch:9200'
    #         XPACK_SECURITY_ENABLED: 'false'
    #         XPACK_MONITORING_ENABLED: 'false'
    #     deploy:
    #         replicas: 1
    

# Swarmpit and related services
    swarmpit-app:
        image: swarmpit/swarmpit:latest
        environment:
            - SWARMPIT_DB=http://db:5984
            - SWARMPIT_INFLUXDB=http://influxdb:8086
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        ports:
              - 888:8080
        deploy:
            resources:
                limits:
                    cpus: '0.50'
                    memory: 1024M
                reservations:
                    cpus: '0.25'
                    memory: 512M
            placement:
                constraints:
                  - node.role == manager
        
    db:
        image: couchdb:2.3.0
        volumes:
            - db-data:/opt/couchdb/data
        deploy:
            resources:
                limits:
                    cpus: '0.30'
                    memory: 256M
                reservations:
                    cpus: '0.15'
                    memory: 128M
        
    influxdb:
        image: influxdb:1.7
        volumes:
            - influx-data:/var/lib/influxdb
        deploy:
            resources:
                limits:
                    cpus: '0.60'
                    memory: 512M
                reservations:
                    cpus: '0.30'
                    memory: 128M
        
    agent:
        image: swarmpit/agent:latest
        environment:
            - DOCKER_API_VERSION=1.35
            - EVENT_ENDPOINT=http://swarmpit-app:8080/events
            - HEALTH_CHECK_ENDPOINT=http://swarmpit-app:8080/version
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        deploy:
            mode: global
            labels:
                swarmpit.agent: 'true'
            resources:
                limits:
                    cpus: '0.10'
                    memory: 64M
                reservations:
                    cpus: '0.05'
                    memory: 32M        

volumes:
    mqtt-conf:
    db-data:
        driver: local
    influx-data:
        driver: local
    # esdata:
    #     driver: local